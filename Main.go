/*
Добро пожаловать!
Это учебная программа для выполнения простых математических операций и для тренировки в выполнения простых функций:
- ввод и вывод текста,
- цикл,
- выбор,
- защита от ввода некорректных данных (в части выбора математической операции),
- прерывание программы.
В программе не реализован следующий функционал, который мог бы быть реализован:
- защита от ввода некорректных данных (в части параметров num1 и num2)
- вынесение некоторых операций в функции (для упрощения общего вида программы).
Часть реализованных функций, например - defer, исключена из программы, т.к. при запуске скомпилированной программы их не будет видно, либо они будут избыточны.
С уважением, разработчик PATihomirov
https://github.com/patihomirov
*/

package main

import (
	"fmt"
	"log"
	"os"
	"time"
)

func main() {
	var num1, num2 int //две переменные для математических операций
	var select1 int    //переменная выбора математической операции
	var out string     //переменная для хранения результата расчетов, это позволит один раз произвести вычисления, поместить их в вывод в терминал и записать в файл
	var outreq bool    //переменная определяющая что требуется вывести результаты расчетов по результату Select
	var escreq bool    //переменная определяющая что требуется выход из программы
	paskhal := fmt.Sprintln(`Добро пожаловать в пасхалку! 
Это учебная программа для выполнения простых математических операций и для тренировки в выполнения простых функций:
- ввод и вывод текста,
- цикл,
- выбор,
- защита от ввода некорректных данных (в части выбора математической операции),
- прерывание программы.
В программе не реализован следующий функционал, который мог бы быть реализован:
- защита от ввода некорректных данных (в части параметров num1 и num2)
- вынесение некоторых операций в функции (для упрощения общего вида программы).
Часть реализованных функций, например - defer, исключена из программы, т.к. при запуске скомпилированной программы их не будет видно, либо они будут избыточны.
С уважением, разработчик PATihomirov 
https://github.com/patihomirov`)

	//Инициируем доступ к лог-файлу
	f, err := os.OpenFile("calchist.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("error opening file: %v", err)
	}
	log.SetOutput(f) //Указываем куда писать лог
	defer f.Close()  //Корректно закрываем доступ к лог-файлу при закрытии программы

	fmt.Println("Учебная программа Калькулятор")

	for escreq != true {
		//Здесь можно было добавить паузу и очистку терминала, но уже не стал делать

		outreq = false // в начале каждого цикла значение приводим к false чтобы потом выставить его в true если нужно вывести печать
		//запрашиваем данные для расчета
		fmt.Println("Введите первое целое число")
		fmt.Scan(&num1) //здесь не хватает контроля корректности ввода, но уже не стал добавлять

		fmt.Println("Введите второе целое число")
		fmt.Scan(&num2) //здесь не хватает контроля корректности ввода, но уже не стал добавлять

		fmt.Println(`Выберите нужную операцию:
1. Сложение
2. Вычитание
3. Умножение
4. Деление
5. Остаток`)
		fmt.Scan(&select1)

		//Формируем результаты расчета
		switch select1 {
		case 1:
			out = fmt.Sprintln(num1, " + ", num2, " = ", num1+num2)
			outreq = true
		case 2:
			out = fmt.Sprintln(num1, " - ", num2, " = ", num1-num2)
			outreq = true
		case 3:
			out = fmt.Sprintln(num1, " * ", num2, " = ", num1*num2)
			outreq = true
		case 4:
			out = fmt.Sprintln(num1, " / ", num2, " = ", num1/num2)
			outreq = true
		case 5:
			out = fmt.Sprintln(num1, " % ", num2, " = ", num1%num2)
			outreq = true
		case 987:
			fmt.Println(paskhal)

		default:
			fmt.Println(select1, " - не подходящее значение, программа закрывается") //здесь можно было добавить возврат на выбор операции, но уже не стал делать
			escreq = true
		}
		if outreq == true {
			fmt.Println(out)

			log.Println(out)
		}
		//Предлагаем выход из программы
		var select2 int //Объявляем переменную выбора выйти из программы или остаться, но могли использовать повторно select1
		fmt.Println(`Желаете ли повторить расчет с новыми данными?
	1. Повторить расчет
	2. Выйти из программы`)
		fmt.Scan(&select2)
		switch select2 {
		case 1:
			fmt.Println(`Повторим расчет`)
		default: //Для удобства пользователя выходим из программы при любом значении отличном от "1"
			escreq = true
		}

	}
	fmt.Println("До свидания!")
	time.Sleep(2 * time.Second) //Задержка перед закрытием консоли программы для отображения прощальной фразы
}
